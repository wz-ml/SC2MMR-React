{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","require","spawn","props","winpercentagestate","value","className","class","type","id","placeholder","readOnly","onClick","e","preventDefault","p1","document","querySelector","p2","num","String","toFixed","rows","cols","bo","prob","resdict","i","i1","i2","game","Number","Math","random","max","result","hasOwnProperty","items","Object","keys","map","key","sort","first","second","res","variable","onChange","ref","input","myinput","perc","diff","log","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,kC,+GCuO5BC,G,YA5NDC,EAAQ,IAAiBC,M,kDAKrC,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,mBAAqB,CACxBC,MAAO,IAHQ,E,qDAuCR,IAAD,OA0FV,OACE,yBAAKC,UAAU,OACf,yBAAKA,UAAU,2CACf,8CACA,2EAEA,yBAAKA,UAAU,wBACf,0DACA,8BACM,yBAAKC,MAAQ,YACb,yBAAKA,MAAQ,eACb,2BAAOC,KAAK,OAAOC,GAAG,QAAQC,YAAc,kBAE5C,yBAAKH,MAAQ,eACb,2BAAOC,KAAK,OAAOC,GAAG,QAAQC,YAAc,mBAG5C,6BACA,yBAAKH,MAAQ,kBAAiB,uCAC9B,yBAAKA,MAAM,YACX,yBAAKA,MAAQ,eACb,2BAAOC,KAAK,YAAYC,GAAG,UAAUE,UAAQ,KAE7C,yBAAKJ,MAAQ,eACb,2BAAOC,KAAK,YAAYC,GAAG,UAAUE,UAAQ,MAG7C,yBAAKJ,MAAQ,iBACb,4BAAQK,QArHI,SAACC,GACjBA,EAAEC,iBACF,IAAIC,EAAGC,SAASC,cAAc,UAAUZ,MACpCa,EAAGF,SAASC,cAAc,UAAUZ,MAEpCc,EAAM,GAAG,EAAE,KAAF,IAAG,IAAMD,EAAGH,GADjB,oBAC0B,IAClCC,SAASC,cAAc,YAAYZ,MAAUe,OAAOD,EAAIE,QAAQ,IAAI,IACpEL,SAASC,cAAc,YAAYZ,MAAUe,QAAQ,IAAID,GAAKE,QAAQ,IAAI,MA8GtE,gBAIN,yBAAKf,UAAU,wBACf,0CACA,8BACM,yBAAKC,MAAQ,YACb,yBAAKA,MAAQ,eACb,2BAAOC,KAAK,OAAOC,GAAG,UAAUC,YAAc,kBAE9C,yBAAKH,MAAQ,eACb,2BAAOC,KAAK,OAAOC,GAAG,UAAUC,YAAc,kBAE9C,yBAAKH,MAAQ,eACb,2BAAOC,KAAK,OAAOC,GAAG,SAASC,YAAc,kBAG7C,6BACA,yBAAKH,MAAQ,6BACb,sCACA,8BAAUA,MAAM,eAAee,KAAK,KAAKC,KAAK,KAAKd,GAAG,mBAEtD,yBAAKF,MAAQ,iBACb,4BAAQK,QApID,SAACC,GACZA,EAAEC,iBACF,IACIC,EAAGC,SAASC,cAAc,YAAYZ,MACtCa,EAAGF,SAASC,cAAc,YAAYZ,MACtCmB,EAAGR,SAASC,cAAc,WAAWZ,MACzC,GAAImB,EAAK,OAGJ,CAIH,IAHA,IACIC,EAAO,GAAG,EAAE,KAAF,IAAG,IAAMP,EAAGH,GADlB,oBAEJW,EAAU,GACLC,EAAI,EAAGA,EAXL,IAWeA,IAAK,CAG7B,IAFA,IAAIC,EAAK,EACLC,EAAK,IACI,CACX,IAAIC,EAAOC,OAAOC,KAAKC,SAAWR,GAGlC,GAFAG,GAAUE,EACVD,GAAW,EAAEC,EACTE,KAAKE,IAAIN,EAAIC,GAAOL,EAAG,EAAI,MAEjC,IAAIW,EAASf,OAAOQ,GAAM,IAAMR,OAAOS,GACnCH,EAAQU,eAAeD,GACzBT,EAAQS,GAAUT,EAAQS,GAAW,KAGrCT,EAAQS,GAAU,KAKxB,IAAIE,EAAQC,OAAOC,KAAKb,GAASc,KAAI,SAASC,GAC5C,MAAO,CAACA,EAAKf,EAAQe,GAAKpB,QAAQ,OAEpCgB,EAAMK,MAAK,SAASC,EAAOC,GACzB,OAAOA,EAAO,GAAKD,EAAM,MAG3B,IAAIE,EAAM,gCAEV,IAAK,IAAIC,KAAYT,EACfA,EAAMD,eAAeU,KAEvBD,EAAMA,EAAMR,EAAMS,GAAU,GAAG,KAAKT,EAAMS,GAAU,GAAK,OAG7D9B,SAASC,cAAc,kBAAkBZ,MAAOe,OAAOyB,MAqFnD,gBAIN,yBAAKvC,UAAU,wBACf,mEACA,8BACM,yBAAKC,MAAQ,YACb,yBAAKA,MAAQ,eACb,2BAAOC,KAAK,OAAOC,GAAG,QAAQsC,SA3FX,SAAClC,GACxBA,EAAEC,iBACF,IAAIC,EAAGC,SAASC,cAAc,UAAUZ,MAEtCW,SAASC,cAAc,UAAUZ,MADzB,GAANU,EACsC,GAGA,GAAGK,QAAQ,IAAIL,GAAIM,QAAQ,KAoFL2B,IAAK,SAACC,GAAD,OAAU,EAAKC,QAAUD,GAAOvC,YAAc,oBAE/G,yBAAKH,MAAQ,eACb,2BAAOC,KAAK,OAAOC,GAAG,QAAQsC,SApFX,SAAClC,GACxBA,EAAEC,iBACF,IAAII,EAAGF,SAASC,cAAc,UAAUZ,MAEtCW,SAASC,cAAc,UAAUZ,MADzB,GAANa,EACsC,GAGA,GAAGE,QAAQ,IAAIF,GAAIG,QAAQ,KA6EL2B,IAAK,SAACC,GAAD,OAAU,EAAKC,QAAUD,GAAOvC,YAAc,qBAG/G,6BACA,yBAAKH,MAAQ,kBAAiB,uCAC9B,yBAAKA,MAAM,YACX,yBAAKA,MAAQ,eACb,8BAAUA,MAAM,eAAee,KAAK,IAAIC,KAAK,KAAKd,GAAG,eAGrD,yBAAKF,MAAQ,iBACb,4BAAQK,QArFA,SAACC,GACbA,EAAEC,iBACF,IAAIqC,EAAOnC,SAASC,cAAc,UAAUZ,MAAM,IAClD,GAAI8C,EAAO,MAASA,EAAO,KAC1BnC,SAASC,cAAc,aAAaZ,MAAO,iDACvC,CACH,IAAI+C,GAASpB,KAAKqB,KAAK,EAAEF,GAAMA,GAAMnB,KAAKqB,IAAI,IAAO,kBACrDrC,SAASC,cAAc,aAAaZ,MAAO,+BAA+Be,OAAOgC,EAAK/B,QAAQ,OA8E5F,gBAIN,yBAAKf,UAAU,2CACf,wEAA6C,uBAAGgD,KAAK,+CAAR,UAA7C,W,GAlNcC,IAAMC,YCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASiD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a05d5392.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component, useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst spawn = require('child_process').spawn;\n\n//import './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.winpercentagestate = {\n      value: \"\"\n    };\n  };\n  /*\n  const [currentSum, setCurrentSum] = useState(0);\n  const [clear, setClear]=useState(false);\n\n  useEffect(()=>{\n    document.querySelector('#result').value=\"\";\n  }, []);\n\n  useEffect(()=> {\n    if (clear){\n      document.querySelector('#result').value = \"\";\n    }\n  });\n  const Add=(e)=>{\n    e.preventDefault();\n    if (clear) setClear(false);\n    let currentNum=document.querySelector(\"#num\").value;\n    if (currentNum=='')\n    return;\n    let sum = currentSum + parseInt(currentNum);\n    setCurrentSum(sum);\n    document.querySelector('#result').value=String(sum);\n  }\n\n  const Clear=(e)=>{\n    e.preventDefault();\n    console.log('sum:', currentSum);\n    document.querySelector('form').reset();\n    setClear(true);\n    setCurrentSum(0);\n  }\n  */\n\n  render () {\n    const PredictWins=(e)=>{\n      e.preventDefault();\n      let p1=document.querySelector(\"#p1mmr\").value;\n      let p2=document.querySelector(\"#p2mmr\").value;\n      var m = 894.5134726042004;\n      let num = 1/(1+(10**((p2-p1)/m)))*100;\n      document.querySelector('#result1').value=(\"\"+String(num.toFixed(3))+\"%\");\n      document.querySelector('#result2').value=(\"\"+String((100-num).toFixed(3))+\"%\");\n    }\n    const BestOf=(e)=>{\n      e.preventDefault();\n      const runs = 100000;\n      var p1=document.querySelector(\"#p1mmr_2\").value;\n      var p2=document.querySelector(\"#p2mmr_2\").value;\n      var bo=document.querySelector(\"#bestof\").value;\n      if (bo < 1) {\n        let res = \"Invalid input.\";\n      }\n      else {\n        var m = 894.5134726042004;\n        var prob = 1/(1+(10**((p2-p1)/m)));\n        var resdict = {};\n        for (var i = 0; i < runs; i++) {\n          let i1 = 0;\n          let i2 = 0;\n          while (true) {\n            let game = Number(Math.random() < prob);\n            i1 = i1 + game;\n            i2 = i2 + (1-game);\n            if (Math.max(i1, i2) > (bo/2)) break;\n          }\n          var result = String(i1) + '-' + String(i2);\n          if (resdict.hasOwnProperty(result)) {\n            resdict[result] = resdict[result] + (100 / runs);\n          }\n          else {\n            resdict[result] = 100/runs;\n            };\n\n        }\n      // Sorting the output...\n      var items = Object.keys(resdict).map(function(key) {\n        return [key, resdict[key].toFixed(2)];\n      });\n      items.sort(function(first, second) {\n        return second[1] - first[1];\n      });\n\n      var res = \"Format: Player 1 - Player 2\\n\"\n      //console.log(items);\n      for (var variable in items) {\n        if (items.hasOwnProperty(variable)) {\n          //console.log(variable);\n          res = res + items[variable][0]+': '+items[variable][1] + '%\\n';\n        }\n      }\n      document.querySelector('#result-bestof').value=(String(res));\n      }\n    }\n    const balance_winrates_1=(e)=>{\n      e.preventDefault();\n      let p1=document.querySelector(\"#p1win\").value;\n      if (p1 == 0) {\n        document.querySelector('#p2win').value=(\"\");\n      }\n      else {\n        document.querySelector('#p2win').value=(\"\"+String((100-p1).toFixed(3)));\n      }\n    }\n    const balance_winrates_2=(e)=>{\n      e.preventDefault();\n      let p2=document.querySelector(\"#p2win\").value;\n      if (p2 == 0) {\n        document.querySelector('#p1win').value=(\"\");\n      }\n      else {\n        document.querySelector('#p1win').value=(\"\"+String((100-p2).toFixed(3)));\n      }\n    }\n    const MMRDiff=(e)=>{\n      e.preventDefault();\n      let perc = document.querySelector('#p1win').value/100;\n      if (perc > 0.998 || perc < 0.002)\n      {document.querySelector('#result_3').value= \"MMR difference too large to be calculated.\"}\n      else {\n        var diff = (-Math.log((1-perc)/perc)/Math.log(10)) * 894.5134726042004;\n        document.querySelector('#result_3').value=(\"MMR difference (P1 - P2): \\n\"+String(diff.toFixed(3)));\n      }\n    }\n  return (\n    <div className=\"App\">\n    <div className=\"container p-3 bg-dark text-white border\">\n    <h1>MMR Calculator</h1>\n    <h5>Calculate win rates, best-of-ns, and more!</h5>\n    </div>\n    <div className=\"container p-3 border\">\n    <h5>Win percentage prediction:</h5>\n    <form>\n          <div class = \"row pl-3\">\n          <div class = \"col-*-* p-1\">\n          <input type=\"text\" id=\"p1mmr\" placeholder = \"Player 1 MMR\" />\n          </div>\n          <div class = \"col-*-* p-1\">\n          <input type=\"text\" id=\"p2mmr\" placeholder = \"Player 2 MMR\" />\n          </div>\n          </div>\n          <br/>\n          <div class = \"container pl-1\"><p>Result:</p></div>\n          <div class=\"row pl-3\">\n          <div class = \"col-*-* p-1\">\n          <input type=\"textfield\" id=\"result1\" readOnly />\n          </div>\n          <div class = \"col-*-* p-1\">\n          <input type=\"textfield\" id=\"result2\" readOnly />\n          </div>\n          </div>\n          <div class = \"container p-1\">\n          <button onClick={PredictWins}>Calculate</button>\n          </div>\n    </form>\n    </div>\n    <div className=\"container p-3 border\">\n    <h5>Best of...</h5>\n    <form>\n          <div class = \"row pl-3\">\n          <div class = \"col-*-* p-1\">\n          <input type=\"text\" id=\"p1mmr_2\" placeholder = \"Player 1 MMR\" />\n          </div>\n          <div class = \"col-*-* p-1\">\n          <input type=\"text\" id=\"p2mmr_2\" placeholder = \"Player 2 MMR\" />\n          </div>\n          <div class = \"col-*-* p-1\">\n          <input type=\"text\" id=\"bestof\" placeholder = \"Best of ...\" />\n          </div>\n          </div>\n          <br/>\n          <div class = \"container p-1 color-white\">\n          <p>Result:</p>\n          <textarea class=\"form-control\" rows=\"11\" cols=\"50\" id=\"result-bestof\" />\n          </div>\n          <div class = \"container p-1\">\n          <button onClick={BestOf}>Calculate</button>\n          </div>\n    </form>\n    </div>\n    <div className=\"container p-3 border\">\n    <h5>Find MMR difference based on win %:</h5>\n    <form>\n          <div class = \"row pl-3\">\n          <div class = \"col-*-* p-1\">\n          <input type=\"text\" id=\"p1win\" onChange={balance_winrates_1} ref={(input)=> this.myinput = input} placeholder = \"Player 1 Win %\" />\n          </div>\n          <div class = \"col-*-* p-1\">\n          <input type=\"text\" id=\"p2win\" onChange={balance_winrates_2} ref={(input)=> this.myinput = input} placeholder = \"Player 2 Win %\" />\n          </div>\n          </div>\n          <br/>\n          <div class = \"container pl-1\"><p>Result:</p></div>\n          <div class=\"row pl-3\">\n          <div class = \"col-*-* p-1\">\n          <textarea class=\"form-control\" rows=\"3\" cols=\"50\" id=\"result_3\" />\n          </div>\n          </div>\n          <div class = \"container p-1\">\n          <button onClick={MMRDiff}>Calculate</button>\n          </div>\n    </form>\n    </div>\n    <div className=\"container p-3 border bg-dark text-white\">\n    <p>Made by Will Z. Check out this project on <a href=\"https://github.com/wz-ml/MMR-Calculator-Sc2\">Github</a>.</p>\n    </div>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}